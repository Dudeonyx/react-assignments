{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","Button/Button.js","ValidationComponent/ValidationComponent.js","CharComponent/CharComponent.js","App.js","serviceWorker.js","index.js"],"names":["userInput","props","name","changed","id","react_default","a","createElement","type","value","onChange","userOutput","children","button","click","onClick","validationComponent","output","length","charComponent","className","char","App","state","user","username","prefix","suffix","myString","usernameChangeHandler","evt","_this","setState","target","logoutHandler","inputChangeHandler","newInput","deleteCharHandler","index","newString","slice","_this2","this","charList","split","map","CharComponent_CharComponent","key","displayInputLength","UserOutput","htmlFor","UserInput","Button","ValidationComponent","Component","Radium","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11894b83.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst userInput = props => {\r\n  const { name, changed, id } = props;\r\n  return <input id={id} type=\"text\" value={name} onChange={changed} />;\r\n};\r\n\r\nexport default userInput;\r\n","import React from 'react';\r\n\r\nconst userOutput = props => {\r\n  const { children } = props;\r\n  return (\r\n    <div>\r\n      <p>{children}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default userOutput;\r\n","import React from 'react';\r\n\r\nconst button = props => {\r\n  const { click, value } = props;\r\n  return (\r\n    <div>\r\n      <button type=\"reset\" onClick={click}>\r\n        {value}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default button;\r\n","import React from 'react';\r\n\r\nconst validationComponent = props => {\r\n  const output =\r\n    props.length < 5 ? 'Text is too short!!!' : 'Text is long enough!!!';\r\n  return <p>{output}</p>;\r\n};\r\n\r\nexport default validationComponent;\r\n","import React from 'react';\r\nimport './CharComponent.css';\r\n\r\nconst charComponent = props => {\r\n  return (\r\n    <span className=\"l-box\" onClick={props.click}>\r\n      {props.char}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default charComponent;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\nimport Button from './Button/Button';\nimport ValidationComponent from './ValidationComponent/ValidationComponent';\nimport CharComponent from './CharComponent/CharComponent';\n// import Label from './Label/Label';\nimport Radium from 'radium';\nclass App extends Component {\n  state = {\n    user: {\n      username: '',\n      prefix: '',\n      suffix: '',\n    },\n    myString: '',\n  };\n\n  usernameChangeHandler = evt => {\n    this.setState({\n      user: {\n        username: evt.target.value,\n        prefix: 'Welcome, ',\n        suffix: '',\n      },\n    });\n  };\n\n  logoutHandler = evt => {\n    this.setState({\n      user: {\n        prefix: '',\n        username: this.state.user.username,\n        suffix: ', has been logged out!',\n      },\n    });\n  };\n\n  inputChangeHandler = evt => {\n    const newInput = evt.target.value;\n    this.setState({\n      myString: newInput,\n    });\n  };\n\n  deleteCharHandler = (evt, index) => {\n    const newString =\n      this.state.myString.slice(0, index) +\n      this.state.myString.slice(index + 1);\n    this.setState({\n      myString: newString,\n    });\n  };\n\n  render() {\n    const charList = (\n      <div>\n        {this.state.myString.split('').map((char, index) => {\n          return (\n            <CharComponent\n              char={char}\n              key={'char' + index}\n              click={evt => this.deleteCharHandler(evt, index)}\n            />\n          );\n        })}\n      </div>\n    );\n\n    let displayInputLength = null;\n\n    if (this.state.myString.length > 0) {\n      displayInputLength = (\n        <p>\n          The length of \"{this.state.myString}\" is {this.state.myString.length}.\n        </p>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hello, welcome to my first(ish) react app</h1>\n        <section>\n          <h2>Two-Way Data Binding Assignment</h2>\n          <UserOutput>\n            It is supposed to showcase basics with some paragraphs and two-way\n            data binding\n          </UserOutput>\n          <UserOutput>\n            So I decided to do some psuedo login/logout behavior\n          </UserOutput>\n          {this.state.user.username ? null : (\n            <UserOutput>Here you go</UserOutput>\n          )}\n          <UserOutput>\n            {this.state.user.username ? this.state.user.prefix : null}\n            {this.state.user.username}\n            {this.state.user.suffix}\n          </UserOutput>\n          <form>\n            <div>\n              <label htmlFor=\"username\">Username/Email: </label>\n              <UserInput\n                id=\"username\"\n                changed={this.usernameChangeHandler}\n                name={this.state.user.username}\n              />\n              <Button value=\"Logout\" click={this.logoutHandler} />\n            </div>\n          </form>\n        </section>\n        <section>\n          <h2>List Conditional Assignment</h2>\n          <label htmlFor=\"string\">Input: </label>\n          <input\n            id=\"stringInput\"\n            type=\"text\"\n            onChange={this.inputChangeHandler}\n            value={this.state.myString}\n          />\n          {displayInputLength}\n          <ValidationComponent length={this.state.myString.length} />\n          {charList}\n          {this.state.myString.length > 0 ? (\n            <p>Click on any character above to delete it</p>\n          ) : null}\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}